openapi: 3.0.0
info:
  title: Library Management API
  version: 1.0.0
  description: API documentation for Library Management System
servers:
  - url: http://localhost:3000/api
    description: Local server
tags:
  - name: Authentication
    description: Đăng ký, đăng nhập và xác thực người dùng (user/librarian).
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Thông báo lỗi chi tiết
      example:
        message: 'Error description'
    UserRegister:
      type: object
      required: [username, email, password]
      properties:
        username: { type: string }
        email:    { type: string }
        password: { type: string }
      example:
        username: johndoe
        email:    john@example.com
        password: secret123
    AuthResponse:
      type: object
      properties:
        message:     { type: string }
        user:
          $ref: '#/components/schemas/User'
        accessToken: { type: string }
    User:
      type: object
      properties:
        id:         { type: integer }
        username:   { type: string }
        email:      { type: string }
        role:       { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      example:
        id: 1
        username: johndoe
        email:    john@example.com
        role:     user
        created_at: '2025-06-10T12:00:00Z'
        updated_at: '2025-06-10T12:00:00Z'
    Book:
      type: object
      properties:
        id:          { type: integer }
        title:       { type: string }
        author:      { type: string }
        publisher:   { type: string }
        year:        { type: integer }
        category_id: { type: integer }
        category:    { type: string }
        quantity:    { type: integer }
        available:   { type: integer }
        description: { type: string }
        created_at:  { type: string, format: date-time }
        updated_at:  { type: string, format: date-time }
      example:
        id: 1
        title: "Clean Code"
        author: "Robert C. Martin"
        publisher: "Prentice Hall"
        year: 2008
        category_id: 1
        category: "Software Engineering"
        quantity: 10
        available: 7
        description: "A handbook of Agile software craftsmanship."
        created_at: '2025-06-01T10:00:00Z'
        updated_at: '2025-06-01T10:00:00Z'
    LoanItem:
      type: object
      properties:
        book_id: { type: integer }
        quantity: { type: integer }
        title: { type: string }
      example:
        book_id: 1
        quantity: 2
        title: "Clean Code"
    CreateLoanRequest:
      type: object
      required: [due_date, items]
      properties:
        due_date: { type: string, format: date }
        items:
          type: array
          items:
            $ref: '#/components/schemas/LoanItem'
      example:
        due_date: "2025-06-30"
        items:
          - book_id: 1
            quantity: 1
          - book_id: 2
            quantity: 2
    Loan:
      type: object
      properties:
        id:          { type: integer }
        user_id:     { type: integer }
        loan_date:   { type: string, format: date }
        due_date:    { type: string, format: date }
        return_date: { type: string, format: date }
        status:      { type: string }
        items:
          type: array
          items:
            $ref: '#/components/schemas/LoanItem'
        created_at:  { type: string, format: date-time }
        updated_at:  { type: string, format: date-time }
      example:
        id: 1
        user_id: 1
        loan_date: "2025-06-01"
        due_date: "2025-06-15"
        return_date: null
        status: "borrowing"
        items:
          - book_id: 1
            quantity: 1
            title: "Clean Code"
          - book_id: 2
            quantity: 2
            title: "Refactoring"
        created_at: '2025-06-01T10:00:00Z'
        updated_at: '2025-06-01T10:00:00Z'
paths:
  /auth/register:
    post:
      summary: Đăng ký tài khoản mới
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Đăng ký thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Dữ liệu đầu vào không hợp lệ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_field:
                  summary: Thiếu trường bắt buộc
                  value:
                    message: "Username, email và password là bắt buộc."
        '409':
          description: Username hoặc email đã tồn tại
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicate_username:
                  summary: Username đã tồn tại
                  value:
                    message: "Username exists"
                duplicate_email:
                  summary: Email đã tồn tại
                  value:
                    message: "Email exists"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Server error"

  /auth/login:
    post:
      summary: Đăng nhập hệ thống
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: Đăng nhập thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Dữ liệu đầu vào không hợp lệ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Username và password là bắt buộc."
        '401':
          description: Sai username hoặc password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Invalid username or password"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Server error"
  /users:
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Dữ liệu đầu vào không hợp lệ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            examples:
              missing_field:
                summary: Thiếu trường bắt buộc
                value:
                  message: "Username, email và password là bắt buộc."
        '409':
          description: Duplicate username/email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            examples:
              duplicate_username:
                summary: Username đã tồn tại
                value:
                  message: "Username exists"
              duplicate_email:
                summary: Email đã tồn tại
                value:
                  message: "Email exists"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Server error"
  /users/{userId}:
    get:
      summary: Get user by ID
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: userId
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Dữ liệu đầu vào không hợp lệ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Missing required fields"
        '401':
          description: Chưa xác thực
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Unauthorized"
        '403':
          description: Không đủ quyền
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Require librarian role!"
        '404':
          description: Không tìm thấy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "User not found"
        '409':
          description: Trùng lặp dữ liệu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Username exists"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Server error"
    put:
      summary: Update user by ID
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: userId
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Dữ liệu đầu vào không hợp lệ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Missing required fields"
        '401':
          description: Chưa xác thực
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Unauthorized"
        '403':
          description: Không đủ quyền
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Require librarian role!"
        '404':
          description: Không tìm thấy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "User not found"
        '409':
          description: Trùng lặp dữ liệu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Username exists"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Server error"
    delete:
      summary: Delete user by ID
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: userId
          schema: { type: integer }
          required: true
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /books:
    get:
      summary: Get all books
      tags: [Books]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      tags: [Books]
      security: [{ bearerAuth: [] }]
      description: Chỉ librarian được phép thêm sách mới.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{bookId}:
    get:
      summary: Get a book by ID
      tags: [Books]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: bookId
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Book not found"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Server error"
    put:
      summary: Update a book by ID
      tags: [Books]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: bookId
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete a book by ID
      tags: [Books]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: bookId
          schema: { type: integer }
          required: true
      responses:
        '204':
          description: Book deleted
        '404':
          description: Book not found

  /books/search:
    get:
      summary: Search books by title
      tags: [Books]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: title
          schema: { type: string }
          required: true
      responses:
        '200':
          description: List of books matching title
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/available:
    get:
      summary: Get all available books
      tags: [Books]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of available books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /loans:
    get:
      summary: Get all loans (librarian) or user loans (user)
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
    post:
      summary: Create a new loan
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
      responses:
        '201':
          description: Loan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'

  /loans/{loanId}:
    get:
      summary: Get a loan by ID
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: loanId
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Loan found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '404':
          description: Loan not found
    put:
      summary: Update a loan by ID
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: loanId
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '200':
          description: Loan updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '404':
          description: Loan not found
    delete:
      summary: Delete a loan by ID
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: loanId
          schema: { type: integer }
          required: true
      responses:
        '204':
          description: Loan deleted
        '404':
          description: Loan not found

  /loans/{loanId}/return:
    post:
      summary: Return a loan (trả sách)
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: loanId
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Loan returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '404':
          description: Loan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Loan not found"
        '409':
          description: Loan đã trả hoặc không hợp lệ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Loan already returned"
        '500':
          description: Lỗi server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Server error"
  /loans/overdue:
    get:
      summary: Get all overdue loans
      tags: [Loans]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of overdue loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'

  /librarians:
    get:
      summary: Get all librarians
      tags: [Librarians]
      security: [{ bearerAuth: [] }]
      description: Chỉ librarian hoặc admin được phép xem danh sách thủ thư.
      responses:
        '200':
          description: List of librarians
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new librarian
      tags: [Librarians]
      security: [{ bearerAuth: [] }]
      description: Chỉ librarian hoặc admin được phép tạo mới thủ thư.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Librarian created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /librarians/{librarianId}:
    get:
      summary: Get librarian by ID
      tags: [Librarians]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: librarianId
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Librarian found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Librarian not found
    put:
      summary: Update librarian by ID
      tags: [Librarians]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: librarianId
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: Librarian updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Librarian not found
    delete:
      summary: Delete librarian by ID
      tags: [Librarians]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: librarianId
          schema: { type: integer }
          required: true
      responses:
        '204':
          description: Librarian deleted
        '404':
          description: Librarian not found